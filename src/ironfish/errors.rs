
/// Error type to handle all errors within the code and dependency-raised
/// errors. This serves 2 purposes. The first is to keep a consistent error type
/// in the code to reduce the cognitive load needed for using Result and Error
/// types. The second is to give a singular type to convert into NAPI errors to
/// be raised on the Javascript side.
#[derive(Debug, PartialEq)]
pub enum IronfishError {
    BellpersonSynthesis,
    CryptoBox,
    FrostLibError,
    FailedArgon2Hash,
    FailedSignatureAggregation,
    FailedSignatureVerification,
    FailedXChaCha20Poly1305Decryption,
    FailedXChaCha20Poly1305Encryption,
    IllegalValue,
    InconsistentWitness,
    InvalidAssetIdentifier,
    InvalidAuthorizingKey,
    InvalidBalance,
    InvalidCommitment,
    InvalidData,
    InvalidDecryptionKey,
    InvalidDiversificationPoint,
    InvalidEntropy,
    InvalidFr,
    InvalidLanguageEncoding,
    InvalidMinersFeeTransaction,
    InvalidMintProof,
    InvalidMintSignature,
    InvalidMnemonicString,
    InvalidNonceLength,
    InvalidNullifierDerivingKey,
    InvalidOutputProof,
    InvalidPaymentAddress,
    InvalidPublicAddress,
    InvalidSecret,
    InvalidRandomizer,
    InvalidSignature,
    InvalidSigningKey,
    InvalidSpendProof,
    InvalidSpendSignature,
    InvalidTransaction,
    InvalidTransactionVersion,
    InvalidViewingKey,
    InvalidWord,
    Io,
    IsSmallOrder,
    RandomnessError,
    RoundTwoSigningFailure,
    TryFromInt,
    Utf8,
}